Singkong Programming Language Interpreter
(c) Noprianto <nopri.anto@icloud.com>, 2019-2020
Website: nopri.github.io
License: Free to use or redistribute
Version: 0.6 (2020-Jan-08 +07:00)

Singkong is based on Monkey.java: an open source, simple implementation of 
Monkey programming language interpreter in Java.
Monkey.java is based on monkey.py: an open source, simple implementation of 
Monkey programming language interpreter in Python.
Monkey.java and monkey.py, (c) Noprianto <nopri.anto@icloud.com>, 2019.

monkey.py is based on code (in Go programming language) in book: 
WRITING AN INTERPRETER IN GO

=============================================================================

 1. What is Singkong Programming Language
 2. System requirements
 3. Getting started
 4. Identifier, data types, and operators
 5. Builtin functions
 6. If condition
 7. Repeat loop
 8. GUI application development
 9. Embedding Singkong into another applications
10. Differences with Monkey Programming Language
11. Development and compatibility
12. Example: GUI: all supported components
13. Example: GUI: layout
14. Example: GUI: display Singkong information in table
15. Example: GUI: event handlers
16. Example: GUI: printing

-----------------------------------------------------------------------------

1. What is Singkong Programming Language
Singkong is case-insensitive, dynamically typed, procedural, and interpreted 
programming language that runs on Java Virtual Machine (Java 5.0 or later). 
It supports number, boolean, string, array, hash, date, first-class function, 
builtin functions, GUI components, and other features. 

Singkong also comes with simple GUI editor/interactive evaluator. 

Singkong can be run on graphical or text user interfaces. It can also be 
embedded and integrated into another applications. Singkong is distributed as 
single jar file. 

Singkong is based on Monkey.java and inspired by Monkey Programming Language.


2. System requirements
Java Runtime Environment version 5.0 or later.  

If only text-based environment is available, Singkong interactive evaluator 
will fallback to text only version and builtin functions will adapt 
appropriately.


3. Getting started
Please download Singkong.jar from its website. The jar file can be saved into
any directory - no system wide installation is required. Using portable Java 
installation, Singkong can be run from external/portable storage device. 

If GUI is available, Singkong.jar comes with interactive evaluator, 
variable inspector, simple text editor, and documentation viewer.

To run Singkong in text mode when GUI is available, please set property
SINGKONG=0 (-DSINGKONG=0). This setting has no effect when GUI is not 
available.

To disable some builtin functions, please set property DISABLE (-DDISABLE) to 
comma-separated list of functions. 

- Standalone
  - No command line argument: interactive
        java -jar Singkong.jar

        Singkong 0.6
        Press ENTER to quit
        > let hello = "Hello World"
        > hello
        "Hello World"
        > 
        
  - No command line argument: interactive (GUI available)
        java -jar Singkong.jar

        (double-clicking Singkong.jar may also work)

  - No command line argument: interactive (run in text mode, GUI available)
        java -DSINGKONG=0 -jar Singkong.jar

  - No command line argument: interactive (disable builtin: system)
        java -DDISABLE=system -jar Singkong.jar

  - No command line argument: interactive (disable builtins: system and info)
        java -DDISABLE=system,info -jar Singkong.jar

  - Command line argument: try to interpret as file
        java -jar Singkong.jar test.singkong

    If exception occurred: interpret the argument as Singkong code
        java -jar Singkong.jar "puts(1,2,3)"

        1
        2
        3
        null

- Library
  Please read: Embedding Singkong into another applications 


4. Identifier, data types, and operators
Identifier starts with letter or underscore and optionally followed by letters,
numbers, or underscores. 

Assignment is done using let statements:
let name = "singkong";
let f = fn(name) { puts(name) }

Note:
- Statement ends with ; 
- Block statement starts with { and ends with }

Data types:
Related functions: builtins, eval, is, hash, print, println, puts, string, type, 
types

- NULL
  - null
  - null literal
  - null may also returned from builtin functions
- NUMBER
  - any integer and decimal
  - precision: 10240, scale: 4
  - operators: + - * / == != %(remainder) ^(power) < <= > >=
  - related functions: abs, integer, number, random, round, words_en, words_id
  - system related functions: delay
- BOOLEAN
  - true or false
  - operators: == != & |
- STRING
  - double-quoted
  - arbitrary length string
  - operators: +(concatenation) -(remove) ==(equals,case-sensitive) != *(repeat)
  - equals (case-insensitive): please use builtin function equals
  - related functions: center, count, cr, crlf, dir, empty, equals, eval, in, 
    index, join, left, len, lf, lower, md5, newline, quote, replace, right, set,
    sha1, sha256, sha384, sha512, slice, split, stat, tab, trim, upper
  - special characters: cr, crlf, lf, newline, quote, tab
  - file related functions: abs, append, read, write
  - system related functions: cwd, separator, user
  - Singkong related functions: load
- ARRAY
  - []
  - array of mixed data types
  - operators: +(add), -(remove) == !=
  - modify ARRAY: please use builtin function set()
  - related functions: array, average, count, each, empty, first, in, index, 
    join, last, len, max, min, pop, push, random, range, rest, slice, sum
  - file related functions: dir
  - system related functions: arguments, system
- HASH
  - {}
  - hash table/dictionary
  - any data type can be used as key
  - hash maintains insertion-order
  - operators: +(add dictionary), -(remove) == !=
  - modify HASH: please use builtin function set()
  - related functions: empty, keys, len, random, values
  - file related functions: properties_read, properties_write, stat
  - system related functions: info
  - Singkong related functions: singkong
- DATE
  - @ @Y @YY @YYY @YYYY @YYYYM @YYYYMM @YYYYMMD @YYYYMMDD @YYYYMMDDh 
    @YYYYMMDDhh @YYYYMMDDhhm @YYYYMMDDhhmm @YYYYMMDDhhmms @YYYYMMDDhhmmss
  - related functions: date, datetime, day, diff, format_date, format_datetime,
    format_diff, hour, minute, month, part, second, year
  - file related functions: stat
- FUNCTION
  - fn()
  - fn(arg)
  - fn(arg, arg,...)
  - function definition: let statement
  - function call: function name followed by (, optional comma-separated 
    arguments, and )
  - related functions: do, each, param
- BUILTIN
  - builtin functions
  - related functions: builtins, disabled, help, param


5. Builtin functions
To get a list of builtin functions, please call builtins()
["ABS", "ADD", "ADD_E", "ADD_N", "ADD_S", "ADD_W", "APPEND", "ARGUMENTS", 
"ARRAY", "AVERAGE", "BUILTINS", "CENTER", "CLOSING", "COMPONENT", 
"COMPONENT_TYPE", "COMPONENTS", "CONFIG", "CONFIRM", "COUNT", "CR", "CRLF", 
"CWD", "DATE", "DATETIME", "DAY", "DELAY", "DIFF", "DIR", "DIRECTORY", 
"DISABLED", "DO", "EACH", "EMPTY", "EQUALS", "EVAL", "EVENT", "EXIT", "FIRST", 
"FORMAT_DATE", "FORMAT_DATETIME", "FORMAT_DIFF", "GET", "GUI", "HASH", "HELP", 
"HIDE", "HOUR", "IN", "INDEX", "INFO", "INPUT", "INTEGER", "IS", "JOIN", 
"KEYS", "LAST", "LEFT", "LEN", "LF", "LOAD", "LOWER", "MAX", "MD5", "MESSAGE", 
"MIN", "MINUTE", "MONTH", "NEWLINE", "NUMBER", "OPEN", "PARAM", "PART", 
"PASSWORD", "POP", "PRINT", "PRINTER", "PRINTLN", "PROPERTIES_READ", 
"PROPERTIES_WRITE", "PUSH", "PUTS", "QUOTE", "RADIO_GROUP", "RANDOM", 
"RANGE", "READ", "REPLACE", "REST", "RIGHT", "ROUND", "SAVE", "SECOND", 
"SEPARATOR", "SET", "SHA1", "SHA256", "SHA384", "SHA512", "SHOW", "SINGKONG", 
"SLICE", "SPLIT", "STAT", "STRING", "SUM", "SYSTEM", "TAB", "TABLE_ADD", 
"TABLE_REMOVE", "TITLE", "TRIM", "TYPE", "TYPES", "UPPER", "USER", "VALUES", 
"WORDS_EN", "WORDS_ID", "WRITE", "YEAR"]

Note: a builtin function may be disabled when the interpreter in run. In such
case, an error will be returned when the function is called. 

To get basic information of each builtin function, please enter its name in
interactive evaluator, without ( and ). For example:

>  random
builtin function: random: returns random number (between 0 inclusive and 1 
exclusive), random number between min and max (both inclusive), random element 
in ARRAY, random key in HASH
arguments: 0, 1 (ARRAY or HASH), 2: (NUMBER and NUMBER)
return value: <any type>

Some functions support arbitrary number of parameters.

GUI/text related functions: confirm, directory, gui, input, open, message, 
password, save
(some of those functions will fallback to simpler text-based version if GUI 
is not available)


6. If condition
Syntax: if (condition) {consequences} else {alternatives}

condition: BOOLEAN
operators: &(and) |(or)

Example:
let name = "singkong";
if (name == "singkong") {
  print(name);
}


7. Repeat loop
repeat { statements }

To exit from loop, use return

Example:
let i = 0;
repeat {
  print(" " + i);
  let i = i + 1;
  if (i > 5) { return i };
}

Please also use do and each functions for simple repetitions:
- do: calls a function a number of times, optionally with arguments
- each: for each element in an ARRAY, calls a function a number of times 
  (with arguments). Specified function must accept two arguments: 
  the element and index (zero based).


8. GUI application development
Singkong supports simple graphical user interface application development. 
To keep it as simple as possible:
- There is only one frame for each Singkong program. No other frames
  or dialogs can be created. An application can only have at most one top-level
  frame and no other dialogs. To show common dialogs, please use related
  builtin functions (confirm, directory, input, open, message, password, save).
  To set frame title, please use builtin function title.
- Every user interface component is a COMPONENT in Singkong.
- To create a user interface component, builtin function component must be used.
  This function accepts two arguments: component type and name, both as string.
  Component type must be a valid component type, and name will be used both as
  name and important properties. For example, to create a button, "button" must
  be passed as component type and name is used as label of that button. 
  Different component may use name for different purposes. For example: when 
  creating a table, name (comma-separated string) is used as column names. 
  This function also accepts optional argument BOOLEAN: if true, created 
  component will be read-only (default: false). However, this only applicable 
  when creating edit, password, table, or text. 
- To get a list of supported component types, builtin function components can be
  used. Currently, this function returns:
  ["button", "checkbox", "combobox", "edit", "label", "password", "radio", 
  "table", "text"]
- To get type of a COMPONENT, please use component_type builtin function. This
  function returns component type as STRING (one of values returned by 
  components function, as above). 
- To add a COMPONENT or an ARRAY of COMPONENT to frame, please use one of the
  following builtin functions: add, add_e, add_n, add_s, add_w (which adds a 
  COMPONENT or an ARRAY of COMPONENT to specific region 
  (center, east, north, south, west) of frame. Existing components in that 
  region will be removed, prior to addition).
- To enable or disable frame closing confirmation, please use closing builtin
  function.
- To configure a COMPONENT, please use config builtin function. This function
  accepts three arguments: COMPONENT, STRING (key), and <any type> (value). 
  Different component may have different keys, but common keys are: 
  - enabled (for all components, expects value as BOOLEAN)
  - text (label of button/checkbox/label/radio, expects value as STRING)
  - active (checkbox/radio expects value as BOOLEAN, combobox/table expects
    value as NUMBER (selected index))
  - contents (contents of combobox/edit/password/table/text, expects value as 
    STRING, ARRAY of ARRAY (table), or ARRAY (combobox))
  (configuration may be ignored if it is not applicable -- no errors will be
   returned).
- To get a configuration of a COMPONENT configured using config, please use
  builtin function get. This function accepts two arguments: COMPONENT and 
  STRING (key). 
  - enabled (for all components, returns a BOOLEAN)
  - text (label of button/checkbox/label/radio, returns a STRING)
  - active (checkbox/radio returns a BOOLEAN, combobox/table returns a NUMBER)
  - contents (contents of combobox/edit/password/table/text, returns a STRING, 
    an ARRAY of ARRAY (of STRING, table), or ARRAY (of STRING, combobox))
  (configuration may be ignored if it is not applicable and NULL will be
   returned).
- table: to add rows or remove a row, please use builtin function table_add or
  table_remove. 
- radio: to group an ARRAY of COMPONENT radio buttons (mutual-exclusion set), 
  please use builtin function radio_group.
- The following COMPONENTs have default event:
  - button: pressed
  - combobox: item changed
  - checkbox: checked/unchecked
  - radio: selected/deselected
  Event handlers for these events can be registered using builtin function
  event. This function accepts two arguments: COMPONENT and FUNCTION.
  Registered FUNCTION will be called whenever the default event for specified
  COMPONENT should be handled. 
  Please note that specified FUNCTION must not require any arguments.
- Printing: simple printing can be done using print dialog. To show a print
  dialog, please use builtin function printer. Basic settings such as font name,
  font size, left/top margin are supported. 


9. Embedding Singkong into another applications
Java applications:
- Class: com.noprianto.singkong.Singkong
- Methods: 
    public static java.lang.String evaluatorString(java.lang.String);

    public static java.lang.String evaluatorString(java.lang.String,
        java.lang.String[]);

    public static java.lang.String evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment);

    public static java.lang.String evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.lang.String[]);

    public static void evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.io.PrintStream);

    public static void evaluatorString(java.lang.String,
        com.noprianto.singkong.SingkongEnvironment,java.io.PrintStream,
        java.lang.String[]);

- From java.util.Map to SingkongEnvironment:
    public static com.noprianto.singkong.SingkongEnvironment environmentFromMap(
        java.util.Map);

Example 1: Test.java
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String code = "let list = [1,2,3]; println(list);";
        String output = Singkong.evaluatorString(code);
        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
[1, 2, 3]
null

Example 2: Test.java
import com.noprianto.singkong.Singkong;
  
public class Test {
    public static void main(String[] args) {
        String code = "println([1,2,3]); system();";
        String output = Singkong.evaluatorString(code, new String[]{"system"});
        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
[1, 2, 3]
ERROR: builtin function "system" is disabled

Example 3: Test.java
import java.util.Map;
import java.util.HashMap;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");
        map.put("test", true);

        String code = "println(hello); println(test);";
        String output = Singkong.evaluatorString(code,
            Singkong.environmentFromMap(map));

        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
Hello, World
true
null

Example 4: Test.java
import java.util.Map;
import java.util.HashMap;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");

        String code = "println(hello); info();";
        String output = Singkong.evaluatorString(code,
            Singkong.environmentFromMap(map),
            new String[]{"system", "info"});

        System.out.println(output);
    }
}

javac -cp Singkong.jar Test.java
java -cp Singkong.jar:. Test
Hello, World
ERROR: builtin function "info" is disabled

Example 5: Test.java
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String result = "";

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");
        map.put("test", true);

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PrintStream output = new PrintStream(outputStream);
            Singkong.evaluatorString("println(hello); println(test)", 
                    Singkong.environmentFromMap(map), output);
            result = outputStream.toString();
        } catch (Exception e) {
        }

        System.out.println(result);
    }
}

javac -cp Singkong.jar Test.java 
java -cp Singkong.jar:. Test
Hello, World
true
null

Example 6: Test.java
import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.Map;
import com.noprianto.singkong.Singkong;

public class Test {
    public static void main(String[] args) {
        String result = "";

        Map<String, Object> map = new HashMap<String, Object>();
        map.put("hello", "Hello, World");

        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        try {
            PrintStream output = new PrintStream(outputStream);
            Singkong.evaluatorString("println(hello); info();",
                    Singkong.environmentFromMap(map), output,
                    new String[]{"system", "info"});
            result = outputStream.toString();
        } catch (Exception e) {
        }

        System.out.println(result);
    }
}

javac -cp Singkong.jar Test.java
java -cp Singkong.jar:. Test
Hello, World
ERROR: builtin function "info" is disabled

Another applications:
Example 7: Python
>>> import subprocess
>>> c = ['java', '-jar', 'Singkong.jar', 'puts("singkong")']
>>> o = subprocess.check_output(c)
>>> print(o)
singkong
null

Example 8: Python
>>> import subprocess
>>> c = ['java', '-DDISABLE=info', '-jar', 'Singkong.jar', 'info()']
>>> o = subprocess.check_output(c)
>>> print(o)
ERROR: builtin function "info" is disabled


10. Differences with Monkey Programming Language
- Singkong is case-insensitive
- Identifier starts with letter or underscore and optionally followed by 
  letters, numbers, or underscores
- null literal
- Singkong has no INTEGER data type. Singkong has NUMBER data type that is
  compatible with INTEGER in Monkey, with support for decimal numbers.
- Additional operators for NUMBER: % ^ <= >=
- Additional operators for BOOLEAN: & |
- HASH: any data type can be used as key, maintains insertion-order
- Additional builtin functions
- Additional data types: DATE
- Singkong use overloaded operators for data types, as much as possible
  (for example, * for string repetition, - for string remove, - for array 
  remove, and many more).
- Repeat loop
- Some builtin functions may be disabled when the interpreter in run 


11. Development and compatibility
- Singkong is developed on Java 8 with -source 1.5 -target 1.5
  (using Java 5.0-compatible application programming interface)
- Run tests: Java 5.0, Java 8 (main testing), and latest Java version 
- Singkong maintains backward compatibility


12. Example: GUI: all supported components
let b = component("button", "Hello");
let c = component("checkbox", "Singkong?");
let m = component("combobox", "Singkong,Programming,Language");
let e = component("edit", "Hello, World");
let l = component("label", "Singkong Programming Language");
let p = component("password", "test");
let r = component("radio", "Radio Button");
let t = component("table", "A,B,C,D,E");
let x = component("text", "Singkong");

add([e, t]);
add_n([l, x, p, c, r, m, b]);

closing("Are you sure you want to quit this application?", "Please confirm");
show();


13. Example: GUI: layout
let c = component("button", "C");
let e = component("button", "E");
let n = component("button", "N");
let w = component("button", "W");

let s1 = component("button", "S 1");
let s2 = component("button", "S 2");
let s3 = component("button", "S 3");
let s = [s1, s2, s3];

add(c);
add_e(e);
add_n(n);
add_s(s);
add_w(w);

show();


14. Example: GUI: display Singkong information in table
let t = component("table","KEY,VALUE,TYPE", true);
let l = component("label", "Singkong Programming Language information");

add_n(l);
add(t);

let s = singkong();
let a = []
let f = fn(x,i) {
    let v = s[x];
    let a = a + [x, v, type(v)]; 
}
each(keys(s), f);

config(t, "contents", a);
show();


15. Example: GUI: event handlers
let b = component("button", "Hello, World");
let c = component("checkbox", "Singkong?");
let r = component("radio", "Radio Button");
let m = component("combobox","Singkong,Programming,Language");

let bb = fn() {
    message(get(b,"text"));
};
event(b, bb);

let cc = fn() {
    message(get(c,"active"));
};
event(c, cc);

let rr = fn() {
    message(get(r,"active"));
};
event(r, rr);

let mm = fn() {
    message(get(m, "contents")[get(m,"active")]);
};
event(m, mm);

add_s([b, c, r, m]);
show();


16. Example: GUI: printing
let t = ["Singkong", "Programming", "Language"];
let size = 12;
let x = 100;
let y = 50;
let font = "monospaced";
printer(t, size, x, y, font);


=============================================================================
Thank you for using Singkong Programming Language.
